
; Copied from the Ucblogo library

; Copyright (C) 1993 by the Regents of the University of California
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


.macro localmake :name :value
output (list "local (word "" :name) "apply ""make (list :name :value))
end

bury "localmake

to ` :backq.list [:backq.depth 0]
if emptyp :backq.list [op []]
if equalp first :backq.list "` ~
   [op fput "`
            fput  (` first bf :backq.list :backq.depth+1)
                  (` bf bf :backq.list :backq.depth)]
if equalp first first :backq.list ", ~
   [op backq.unquote (bf first :backq.list) (bf :backq.list) :backq.depth]
if memberp first first :backq.list [" :] ~
   [op backq.word (first first :backq.list) (bf first :backq.list)
                  (bf :backq.list) :backq.depth]
if wordp first :backq.list ~
   [op fput first :backq.list (` bf :backq.list :backq.depth)]
op fput (` first :backq.list :backq.depth) (` bf :backq.list :backq.depth)
end

to backq.word :backq.symbol :backq.word :backq.rest :backq.depth
if emptyp :backq.word ~
   [output fput :backq.symbol (` :backq.rest :backq.depth)]
if not equalp first :backq.word ", ~
   [output fput (word :backq.symbol :backq.word)
                (` :backq.rest :backq.depth)]
localmake "result backq.unquote (bf :backq.word) :backq.rest :backq.depth
if wordp :result [output word :backq.symbol :result]
output fput (word :backq.symbol first :result) bf :result
end

to backq.unquote :unquote.symbol :unquote.rest :unquote.depth
localmake "unquote.splicing "false
if not emptyp :unquote.symbol [
   if equalp first :unquote.symbol "@ [
      make "unquote.splicing "true
      make "unquote.symbol butfirst :unquote.symbol
]]
if :unquote.depth=0 [
  if emptyp :unquote.symbol
     [output backq.combine run first :unquote.rest
                           (` bf :unquote.rest :unquote.depth)]
  output backq.combine run :unquote.symbol (` :unquote.rest :unquote.depth)
]
if emptyp :unquote.symbol ~
   [output fput (ifelse :unquote.splicing [",@] [",])
                fput (` first :unquote.rest :unquote.depth-1)
                     (` bf :unquote.rest :unquote.depth)]
if backq.all.commas :unquote.symbol ~
   [output fput (ifelse :unquote.splicing [",@] [",])
                fput (` (list :unquote.symbol first :unquote.rest)
                        :unquote.depth-1)
                     (` bf :unquote.rest :unquote.depth)]
output fput (ifelse :unquote.splicing [",@] [",]) ~
            fput (` (list :unquote.symbol) :unquote.depth-1) ~
                 (` :unquote.rest :unquote.depth)
end

to backq.combine :this :those
output ifelse :unquote.splicing [se :this :those] [fput :this :those]
end

to backq.all.commas :word
if emptyp :word [output "true]
if equalp first :word ", ~
   [if emptyp butfirst :word [output "true]
    if equalp first butfirst :word "@ [output backq.all.commas bf bf :word]
    output backq.all.commas butfirst :word]
output "false
end

bury [` backq.word backq.unquote backq.combine backq.all.commas]

to reverse :in [:out ifelse listp :in [[]] ["]]
if emptyp :in [output :out]
output (reverse bf :in combine first :in :out)
end

bury "reverse

to remove :thing :list
output filter [not equalp ? :thing] :list
end

bury "remove

to remdup :list
output filter [not memberp ? ?rest] :list
end

bury "remdup

to quoted :stuff
if wordp :stuff [op word "" :stuff]
op :stuff
end

bury "quoted

to push :the.stack.name :the.item.value
make :the.stack.name fput :the.item.value thing :the.stack.name
end

bury "push

to pop :the.stack.name
local "result
make "result first thing :the.stack.name
make :the.stack.name butfirst thing :the.stack.name
output :result
end

bury "pop

to queue :the.queue.name :the.item.value
make :the.queue.name lput :the.item.value thing :the.queue.name
end

bury "queue

to dequeue :the.queue.name
local "result
make "result first thing :the.queue.name
make :the.queue.name butfirst thing :the.queue.name
output :result
end

bury "dequeue

to iseq :a :b
if not (:a > :b) [output iseq1 :a :b]
output map [[x] (-1) * :x] iseq1 (-1 * :a) (-1 * :b)
end

to iseq1 :a :b
if :a > :b [output []]
output fput :a iseq1 :a + 1 :b
end

bury [iseq iseq1]

to rseq :a :b :n
output map [[x] :a + :x * (:b - :a) / (:n - 1)] iseq 0 :n - 1
end

bury "rseq

to name :name.value.input :name.variable.input
make :name.variable.input :name.value.input
end

bury "name

to namelist :names
if wordp :names [output list [] (list :names)]
output list [] :names
end

bury "namelist

to pllist :names
if wordp :names [output (list [] [] (list :names))]
output (list [] [] :names)
end

bury "pllist

to poall
po contents
end

bury "poall

to pops
po procedures
end

bury "pops

to pons
po names
end

bury "pons

to popls
po plists
end

bury "popls

to pots
pot procedures
end

bury "pots

to ern :names
erase namelist :names
end

bury "ern

to erpl :names
erase pllist :names
end

bury "erpl

to buryall
bury contents
end

bury "buryall

to buryname :names
bury namelist :names
end

bury "buryname

to unburyall
unbury buried
end

bury "unburyall

to unburyname :names
unbury namelist :names
end

bury "unburyname

to edall
edit contents
end

bury "edall

to edps
edit procedures
end

bury "edps

to edns
edit names
end

bury "edns

to edpls
edit plists
end

bury "edpls

to edn :names
edit namelist :names
end

bury "edn

to edpl :names
edit pllist :names
end

bury "edpl

to savel :cont :file [:oldwr writer]
openwrite :file
setwrite :file
po :cont
setwrite :oldwr
close :file
end

bury "savel

to ignore :stuff
end

bury "ignore

;.macro for :for.values :for.instr ~
;   [:for.var first :for.values] ~
;   [:for.initial run first bf :for.values] ~
;   [:for.final run first bf bf :for.values] ~
;   [:for.step forstep] ~
;   [:for.tester (ifelse :for.step < 0 ~
;                       [[:for.initial < :for.final]] ~
;                       [[:for.initial > :for.final]])]
;local :for.var
;catch "for.catchtag [op for.done runresult [forloop :for.initial]]
;op []
;end

;to forloop :for.initial
;make :for.var :for.initial
;if run :for.tester [throw "for.catchtag]
;run :for.instr
;.maybeoutput forloop (:for.initial + :for.step)
;end

;to for.done :for.result
;if emptyp :for.result [op [stop]]
;op (list "output "first (list first :for.result))
;end

;to forstep
;if equalp count :for.values 4 [op run last :for.values]
;op ifelse :for.initial > :for.final [-1] [1]
;end

;to for.tester
;op ifelse :for.step < 0 [
;    [:for.initial < :for.final]
;] [
;    [:for.initial > :for.final]
;]
;end

;bury [for forstep forloop for.done for.tester]

.macro do.while :while.instr :while.cond
op se :while.instr (list "while :while.cond :while.instr)
end

bury "do.while

.macro do.until :until.instr :until.cond
op se :until.instr (list "until :until.cond :until.instr)
end

bury "do.until

.macro until :until.cond :until.instr
if run :until.cond [op []]
op se :until.instr (list "until :until.cond :until.instr)
end

bury "until

.macro case :case.value :case.clauses [:caseignoredp "true]
catch "case.error [output case.helper :case.value :case.clauses]
(throw "error [Empty CASE clause])
end

to case.helper :case.value :case.clauses
if emptyp :case.clauses [output []]
if emptyp first :case.clauses [throw "case.error]
if or equalp first first :case.clauses "else ~
      memberp :case.value first first :case.clauses ~
   [output butfirst first :case.clauses]
output case.helper :case.value butfirst :case.clauses
end

bury [case case.helper]

.macro cond :cond.clauses
localmake "cond.result cond.helper :cond.clauses
if equalp first :cond.result "error [(throw "error last :cond.result)]
output last :cond.result
end

to cond.helper :cond.clauses
if emptyp :cond.clauses [output [[] []]]
if emptyp first :cond.clauses [output [error [Empty COND clause]]]
if equalp first first :cond.clauses "else ~
   [output list [] butfirst first :cond.clauses]
ignore error
catch "error [localmake "cond.result run first first :cond.clauses]
localmake "cond.error error
if not emptyp :cond.error [output list "error item 2 :cond.error]
if not memberp :cond.result [true false] ~
   [output list "error fput :cond.result [not TRUE or FALSE]]
if :cond.result [output list [] butfirst first :cond.clauses]
output cond.helper butfirst :cond.clauses
end

bury [cond cond.helper]

;.macro foreach [:foreach.inputs] 2
;catch "foreach.catchtag ~
;      [op foreach.done runresult ~
;	    [foreach1 butlast :foreach.inputs last :foreach.inputs 1]]
;op []
;end

;to foreach1 :template.lists :foreach.template :template.number
;if emptyp first :template.lists [throw "foreach.catchtag]
;apply :foreach.template firsts :template.lists
;.maybeoutput foreach1 butfirsts :template.lists ~
;                      :foreach.template :template.number+1
;end

;to foreach.done :foreach.result
;if emptyp :foreach.result [op [stop]]
;op (list "output "first (list first :foreach.result))
;end

to ?rest [:which 1]
output butfirst item :which :template.lists
end

bury [foreach foreach1 foreach.done ?rest]

to map.se :map.se.template [:template.lists] 2
op map.se1 :template.lists 1
end

to map.se1 :template.lists :template.number
if emptyp first :template.lists [output []]
output sentence (apply :map.se.template firsts :template.lists) ~
                (map.se1 bfs :template.lists :template.number+1)
end

to ?rest [:which 1]
output bf item :which :template.lists
end

bury [map.se map.se1 ?rest]

to filter :filter.template :template.list [:template.number 1] ~
          [:template.lists (list :template.list)]
if emptyp :template.list [op :template.list]
if apply :filter.template (list first :template.list) ~
   [op combine (first :template.list) ~
               (filter :filter.template bf :template.list :template.number+1)]
op (filter :filter.template bf :template.list :template.number+1)
end

to ?rest [:which 1]
output bf item :which :template.lists
end

bury [filter ?rest]

to find :find.template :template.list [:template.number 1] ~
        [:template.lists (list :template.list)]
if emptyp :template.list [op []]
if apply :find.template (list first :template.list) [op first :template.list]
op (find :find.template bf :template.list :template.number+1)
end

to ?rest [:which 1]
output bf item :which :template.lists
end

bury [find ?rest]

to reduce :reduce.function :reduce.list
if emptyp bf :reduce.list [op first :reduce.list]
op apply :reduce.function (list (first :reduce.list) ~
                                (reduce :reduce.function bf :reduce.list))
end

bury "reduce

to crossmap :cm.template [:cm.lists] 2
if emptyp bf :cm.lists [op cm1 first :cm.lists 1 []]
op cm1 :cm.lists 1 []
end

to cm1 :cm.lists :cm.level :template.vars
if emptyp :cm.lists [op (list apply :cm.template :template.vars)]
op cm2 first :cm.lists
end

to cm2 :cm.thislist
if emptyp :cm.thislist [op []]
local :cm.level
make :cm.level first :cm.thislist
op se (cm1 bf :cm.lists :cm.level+1 lput first :cm.thislist :template.vars) ~
      (cm2 bf :cm.thislist)
end

bury [crossmap cm1 cm2]

to cascade :cascade.limit [:cascade.inputs] 3
if numberp :cascade.limit ~
   [if lessp :cascade.limit 0 ~
       [(throw "error (se [cascade doesn't like] :cascade.limit [as input]))] ~
    make "cascade.limit `[greaterp :template.number ,[int :cascade.limit]]]
local [cascade.templates template.vars cascade.final]
make "cascade.templates []
make "template.vars []
make "cascade.final [?1]
cascade.setup :cascade.inputs
op cascade1 1 :template.vars
end

to cascade.setup :inputs
if emptyp :inputs [stop]
if emptyp bf :inputs [make "cascade.final first :inputs stop]
make "cascade.templates lput first :inputs :cascade.templates
make "template.vars lput first bf :inputs :template.vars
cascade.setup bf bf :inputs
end

to cascade1 :template.number :template.vars
if apply :cascade.limit :template.vars [op apply :cascade.final :template.vars]
op cascade1 (:template.number+1) (cascade.eval :cascade.templates)
end

to cascade.eval :cascade.templates
if emptyp :cascade.templates [op []]
op fput (apply first :cascade.templates :template.vars) ~
        (cascade.eval bf :cascade.templates)
end

bury [cascade cascade.setup cascade1 cascade.eval]

to cascade.2 [:cascade2.inputs] 5
op apply "cascade :cascade2.inputs
end

bury "cascade.2

to transfer :transfer.limit :transfer.template :transfer.init
output cascade.2 (ifelse emptyp :transfer.limit ~
                         [[emptyp ?2]] ~
                         [list "transfer.end.test :transfer.limit]) ~
                 :transfer.template [] [butfirst ?2] :transfer.init
end

to transfer.end.test :the.condition.expression
if emptyp ?2 [output "true]
output run :the.condition.expression
end

to ?in
output first ?2
end

to ?out
output ?1
end

bury [transfer transfer.end.test ?in ?out]

to macroexpand :expr
local [name inputlist macro.result]
make "name first :expr
make "inputlist bf :expr
if not macrop :name [(throw "error (se :name [is not a macro.]))]
define "%%%$%macro.procedure text :name
make "macro.result run fput "%%%$%macro.procedure :inputlist
erase "%%%$%macro.procedure
op :macro.result
end

bury "macroexpand

to pen
op (list (ifelse pendownp ["pendown] ["penup]) ~
         penmode pensize pencolor)
end

bury [pen]

to setpen :pen_data
ifelse equalp first bf :pen_data "erase ~
       [penerase] ~
       [penpaint]
ifelse equalp first :pen_data "penup [penup] [pendown]
setpensize first bf bf :pen_data
setpencolor first bf bf bf :pen_data
end

bury [setpen]

to mdarray :sizes [:origin 1]
local "array
make "array (array first :sizes :origin)
if not emptyp bf :sizes ~
   [for [i :origin [:origin + (first :sizes) - 1]] ~
        [setitem :i :array (mdarray bf :sizes :origin)]]
output :array
end
bury "mdarray

to mditem :index :array
if emptyp :index [op :array]
op mditem bf :index item first :index :array
end
bury "mditem

to mdsetitem :index :array :val
setitem last :index (mditem bl :index :array) :val
end
bury "mdsetitem

