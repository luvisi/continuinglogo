
to union :l1 :l2
    local "thing
    if emptyp :l1 [op :l2]
    make "thing first :l1
    if memberp :thing :l2 [op union bf :l1 :l2]
    op combine :thing union bf :l1 :l2
end
bury "union

to intersect :l1 :l2
    local "thing
    if emptyp :l1 [op []]
    make "thing first :l1
    if memberp :thing :l2 [op combine :thing intersect bf :l1 :l2]
    op intersect bf :l1 :l2
end
bury "intersect

to pick :thing
  output item ((ifelse arrayp :thing [first :thing] [1]) + ~
               random count :thing) ~
              :thing
end
bury "pick

to min :arg1 :arg2
    if :arg1 < :arg2 [op :arg1]
    op :arg2
end

to max :arg1 :arg2
    if :arg1 > :arg2 [op :arg1]
    op :arg2
end
bury [min max]

to startswith :thing1 :thing2
    if emptyp :thing1 [op "true]
    if (first :thing1) <> (first :thing2) [op "false]
    op startswith bf :thing1 bf :thing2
end
bury [startswith]

; A word is the name of a property list if it has a non-empty
; property list.
to plistp :thing
  if wordp :thing [output (plist :thing) <> []]
  output "false
end
bury "plistp

copydef "plist? "plistp
bury "plist?

; save_source_helper prints only the LINE objects in :body.
; Typical uses will include:
;   :printer is TYPE and :getter is LINE_RAW for printing the
;   raw version of a procedure.  This will happen when the procedure
;   was defined using TO.
;
;   :printer is PRINT and :getter is LINE_PARSED for printing the
;   parsed version of a procedure.  This will happen when the procedure
;   was defined using DEFINE.
;
to save_source_helper :printer :getter :body
  if :body = [] [stop]
  if linep first :body [invoke :printer invoke :getter first :body]
  save_source_helper :printer :getter butfirst :body
end
bury "save_source_helper

; These add colons to variables when generating the TO line while
; saving a procedure that was defined using DEFINE.
to save_source.maybe.addcolon :arg
    if wordp :arg [
        if or emptyp :arg (first :arg) <> ": [op word ": :arg]
        op :arg
    ]
    if listp :arg [op fput save_source.maybe.addcolon first :arg bf :arg]
    op :arg
end
bury "save_source.maybe.addcolon

to save_source.addcolons :args
    op map "save_source.maybe.addcolon :args
end
bury "save_source.addcolons


; This prints out the source for a procedure.
; If the procedure was defined using TO, then we can just
; print the raw version of each line, as originally entered.
;
; If the procedure was defined using DEFINE, then we need to
; do some extra work to generate the TO line, and we also need to
; print out the body with FULLPRINTP set to TRUE.
to save_source :proc
  localmake "source symbol_source :proc

  if :source = [] [
    ; We have no source to print.  Generate an empty definition.
    print (list "to :proc)
    print "end
    print "
    stop
  ]

  if (line_raw first :source) = [] [
      ; We have no raw input, meaning the procedure was probably
      ; created with DEFINE.  We need to create a new TO line and
      ; print the parsed version of each LINE object in the definition.
      localmake "fullprintp "true
      localmake "first_line line_parsed first :source
      print (se "to :proc save_source.addcolons bf bf :first_line)
      save_source_helper "print "line_parsed bf :source
  ] [
      ; We have raw input, meaning the procedure was probably defined
      ; normally with TO.  We type out the raw input.
      localmake "fullprintp "false
      save_source_helper "type "line_raw :source
  ]
  print "end
  print "
end
bury "save_source

to quote_if_name :thing
  if and wordp :thing not numberp :thing [output word "" :thing]
  output :thing
end
bury "quote_if_name

to save_plist_helper :name :l
  if :l = [] [stop]
  (show "pprop word "" :name quote_if_name first :l ~
                             quote_if_name first butfirst :l)
  save_plist_helper :name butfirst butfirst :l
end
bury "save_plist_helper

to save_plist :name
  localmake "fullprintp "true
  save_plist_helper :name plist :name
end
bury "save_plist

to save_name :name
  localmake "fullprintp "true
  if not namep :name [stop]
  (show "make word "" :name quote_if_name thing :name)
end
bury "save_name
  
; Print Out Names
to pon :names
  if :names = [] [stop]
  if wordp :names [save_name :names stop]
  save_name first :names
  pon butfirst :names
end
bury "pon

; Print Out Property Lists
to popl :names
  if :names = [] [stop]
  if wordp :names [save_plist :names stop]
  save_plist first :names
  popl butfirst :names
end
bury "popl

; Prints out Logo code to recreate the things in :contentslist.
; If :contentslist is a word, it is treated as the name of a procedure.
; If :contentslist is a list of words, it is treated as a list of
; procedure names.
; If :contents is a list of up to three lists, they are treated as:
;    a list of procedure names.
;    a list of variable names.
;    a list of property list names.
to printout :contentslist
  if :contentslist = [] [stop]
  if wordp :contentslist [save_source :contentslist stop]
  if wordp first :contentslist [
      save_source first :contentslist
      printout butfirst :contentslist
      stop
  ]
  printout first :contentslist
  make "contentslist butfirst :contentslist
  if not emptyp :contentslist [
      pon first :contentslist
      make "contentslist butfirst :contentslist
  ]
  if not emptyp :contentslist [
      popl first :contentslist
  ]
end
bury "printout

copydef "po "printout
bury "po

; Prints out just the title line of a procedure.
to pot.print.title :proc
  localmake "source symbol_source :proc

  ; If we have no source code, we generate a new title line.
  if :source = [] [
    print (list "to :proc)
    stop
  ]

  if (line_raw first :source) = [] [
      ; If we have no raw source, we generate it from the parsed version.
      ; This happens with procedures created with DEFINE.
      localmake "fullprintp "true
      localmake "first_line line_parsed first :source
      print (se "to :proc save_source.addcolons bf bf :first_line)
  ] [
      ; If we have a raw title line, then we just print it out.
      ; This happens whith procedures created with TO.
      localmake "fullprintp "false
      type line_raw first :source
  ]
end
bury "pot.print.title

; Print Out Titles
; Like PRINTOUT, but only prints the title TO line for procedures.
; If :contentslist is a word, it is treated as the name of a procedure.
; If :contentslist is a list of words, it is treated as a list of
; procedure names.
; If :contents is a list of up to three lists, they are treated as:
;    a list of procedure names.
;    a list of variable names.
;    a list of property list names.
to pot :contentslist
  if :contentslist = [] [stop]
  if wordp :contentslist [pot.print.title :contentslist stop]
  if wordp first :contentslist [
      pot.print.title first :contentslist
      pot butfirst :contentslist
      stop
  ]
  pot first :contentslist
  make "contentslist butfirst :contentslist
  if not emptyp :contentslist [
      pon first :contentslist
      make "contentslist butfirst :contentslist
  ]
  if not emptyp :contentslist [
      popl first :contentslist
  ]
end
bury "pot


.macro savecontents :file :contents
  output (list "openwrite quoted :file          ~
               "setwrite quoted :file           ~
               "printout quote_if_name :contents ~
               "setwrite []                      ~
               "close quoted :file              ~
               "print ""Saved)
end
bury "savecontents

.macro save :file
  output (list "savecontents quote_if_name :file "contents)
end
bury "save

to pause_caller :paused.procedure
    pause
end
bury "pause_caller

to pause
    local "pause.error
    localmake "pause.saved.input reader
    localmake "pause.saved.output writer
    setread []
    setwrite []
    localmake "result ~
        runresult [catch "pause [
           while ["true] [
               catch "error [logo]
               make "pause.error error
               if :pause.error <> [] [print :pause.error]]]]
    setread :pause.saved.input
    setwrite :pause.saved.output
    if :result <> [] [output first :result]
end
bury "pause

to continue [:args]
    if :args <> [] [(throw "pause first :args)]
    throw "pause
end
bury "continue

.macro c [:args]
    output (sentence "\( "continue map "quote_if_name :args "\) )
end
bury "c

.macro while :while.cond :while.instr
  op (list "if "run quoted :while.cond ~
               (list "run quoted :while.instr ~
                     "while quoted :while.cond quoted :while.instr))
end
bury "while

; Reads the entire input file, until an EOF, using READLIST on each
; line.  Returns a list of lists, with one list for each line.
to read_lines_readlist
    localmake "line readlist
    if :line = " [output []]
    output fput :line read_lines_readlist
end
bury "read_lines_readlist

; Reads the entire input file, until an EOF, using READWORD on each line.
; Returns a list of words, with one word for each line.
to read_lines_readword
    localmake "line readword
    if :line = [] [output []]
    output fput :line read_lines_readword
end
bury "read_lines_readword

; Runs :command and returns the result.
; By default, the return value is a list of lists, with each
; line read by READLIST.
; If :wordflag is provided, regardless of value, then the result
; is a list of words, with one word for each line in the output
; of :command.
to shell :command [:wordflag]
    localmake "oldreader reader
    local "result
    openshell "shellfile :command
    setread "shellfile
    ifelse emptyp :wordflag [
        make "result read_lines_readlist
    ] [
        make "result read_lines_readword
    ]
    setread :oldreader
    close "shellfile
    output :result
end
bury "shell

; Set the editor to be used when editing procedures, variables, or property
; lists with EDIT.
to seteditor :e
    make "edit.editor :e
end
bury "seteditor


; Get the editor to be used when editing procedures, variables, or property
; lists with EDIT.
; :edit.editor is used if it is set, then we try the VISUAL and EDITOR
; environment variables, and finally we default to vi.
to edit.editor
    if namep "edit.editor [output :edit.editor]
    localmake "editor getenv "VISUAL
    if :editor <> [] [output :editor]
    make "editor getenv "EDITOR
    if :editor <> [] [output :editor]
    output "vi
end
bury [[edit.editor] [edit.editor]]

; Edit the procedures, variables, and property lists in
; :contentslist.  Terminal version.
; This is done by saving the definitions to a temp file, editing the
; file, and then loading the file.
to terminal.edit :contentslist [:tmp "logo.temp.txt]
    savecontents :tmp :contentslist
    localmake "status system (list edit.editor :tmp)
    if :status <> 0 [throw "error [edit error]]
    load :tmp
end
bury "terminal.edit

; GUI Edit. Edit using wxWidgets wxedit.
to wxwidgets.edit :contentslist [:tmp "logo.temp.txt]
    localmake "target [gedit.working.string]
    savecontents :target :contentslist
    openwrite :tmp
    setwrite :tmp
    print wxedit :gedit.working.string
    setwrite []
    close :tmp
    load :tmp
end
bury [[wxwidgets.edit] [gedit.working.string]]

; Edit.  Call terminal.edit or wxwidgets.edit as appropriate.
to edit :contentslist [:tmp "logo.temp.txt]
    ifelse :terminalp [
        (terminal.edit :contentslist :tmp)
    ] [
        (wxwidgets.edit :contentslist :tmp)
    ]
end
bury "edit

; Edit an existing file, and then reload it.
; This is useful for editing, then testing, then editing, then testing
; a set of definitions.
to editfile :file
    localmake "status system (list edit.editor :file)
    if :status <> 0 [throw "error [edit error]]
    load :file
end
bury "editfile

copydef "ed "edit
bury "ed

; Pull out the definition of :proc in a format suitable for
; DEFINE, that is, a list of parsed lines whose first element
; is a list of arguments.
to text :proc
    localmake "source symbol_source :proc
    localmake "args bf bf line_parsed first :source ; Skip "to <name>"
    localmake "body map [line_parsed ?] bf :source
    op fput :args :body
end
bury "text

; Return the raw text of a procedure.  If it was defined with
; TO, then this is the exact text used to define the procedure.
; Otherwise, returns parsed versions of the lines.
to rawtext :proc
    localmake "source symbol_source :proc
    if (line_raw first :source) = [] [
        op map [line_parsed ?] :source
    ] [
        op map [line_raw ?] :source
    ]
end
bury "rawtext
    
; Returns all unburied procedures.
to procedures
    op first contents
end
bury "procedures

; Returns all primitives.  This includes procedures defined in
; lisp.
to primitives
    op filter "primitivep oblist
end
bury "primitives

; Returns all unburied variable names in a contents list.
to names
    op (list [] first bf contents)
end
bury "names

; Returns all unburied property list names in a contents list.
to plists
    op (list [] [] first bf bf contents)
end
bury "plists

; Returns the current repetition count for the innermost REPEAT or FOREVER.
;to repcount
;  op :repcount
;end
;bury "repcount

.macro repeat.helper :current.count :count :block
  if :current.count < :count [
    op (list "invoke "fput [template.number] :block :current.count ~
        "repeat.helper :current.count+1 :count :block)
  ] 
  if :current.count = :count [
    op (list "invoke "fput [template.number] :block :current.count)
  ]
  op []
end
bury "repeat.helper

.macro repeat :count :block
    op (list "repeat.helper 1 :count :block)
end
bury "repeat

.macro forever.helper :current.count :block
  op (list "invoke "fput [template.number] :block :current.count ~
      "forever.helper :current.count+1 :block)
end
bury "forever.helper
  
.macro forever :block
  op (list "forever.helper 1 :block)
end
bury "forever

; Erase all unburied procedures, variables names, and property lists.
to erall
  erase contents
end
bury "erall

; Erase all unburied procedures.
to erps
  erase procedures
end
bury "erps

; Erase all unburied variable names.
to erns
  erase names
end
bury "erns

; Erase all unburied variable property lists.
to erpls
  erase plists
end
bury "erpls

to lput :thing :group
  if wordp :group [op word :group :thing]
  if listp :group [op se :group (list :thing)]
  throw "error (word "|Bad argument to lput: | :group)
end
bury "lput

to firsts :l
  op map "first :l
end
bury "firsts

to butfirsts :l
  op map "butfirst :l
end
bury "butfirsts

copydef "bfs "butfirsts
bury "bfs

; McCarthy's Ambiguous Operator.
; Returns the first argument.
; If FAIL is called later in the program, then control returns
; to this procedure, and it returns the next argument.
; If it is out of arguments, then it fails, causing any previous
; instance of AMB to resume.
; If there are no previous instances left to resume, then we throw
; an error.

make "amb.continuation [(throw "error "|amb: Out of alternatives|)]
to amb [:values]
    output callcc [[return]
        localmake "amb.old.continuation :amb.continuation
        make "amb.continuation callcc [[resume] :resume]
        if emptyp :values [
            make "amb.continuation :amb.old.continuation
            invoke :amb.continuation :amb.continuation
        ]
        localmake "ret first :values
        make "values butfirst :values
        invoke :return :ret
    ]
end
bury [[amb] [amb.continuation]]

to fail
  (amb)
end
bury "fail

;to #
;  op :template.number
;end
;bury "#


; Turtle commands.
; By default, we send commands to turtle 0.
make "wx.active.turtles [0]
bury [[][wx.active.turtles]]

to ask :ask.turtlelist :ask.instructions
    localmake "wx.active.turtles (se :ask.turtlelist)
    .maybeoutput run :ask.instructions
end
bury "ask

to tell :tell.turtlelist
    make "wx.active.turtles (se :tell.turtlelist)
end
bury "tell


to each.helper :each.turtlelist :each.instructions
    if emptyp :each.turtlelist [stop]
    make "wx.active.turtles (se first :each.turtlelist)
    if emptyp bf :each.turtlelist [
        .maybeoutput run :each.instructions
    ]
    ignore runresult :each.instructions
    each.helper bf :each.turtlelist :each.instructions
end
bury "each.helper

to each :each.instructions
    localmake "each.turtlelist :wx.active.turtles
    local "wx.active.turtles 
    each.helper :each.turtlelist :each.instructions
end
bury "each

to who
    if (count :wx.active.turtles) = 1 [op first :wx.active.turtles]
    op :wx.active.turtles
end
bury "who

to forward :d
    foreach :wx.active.turtles [tforward ? :d]
end
copydef "fd "forward
bury [forward fd]

to back :d
    foreach :wx.active.turtles [tforward ? -:d]
end
copydef "bk "back
bury [back bk]

to arc :angle :distance
    foreach :wx.active.turtles [tarc ? :angle :distance]
end    
bury "arc

to right :a
    foreach :wx.active.turtles [tright ? :a]
end
copydef "rt "right
bury [right rt]

to left :a
    foreach :wx.active.turtles [tright ? -:a]
end
copydef "lt "left
bury [left lt]

to penup
    foreach :wx.active.turtles [tpenup ?]
end
copydef "pu "penup
bury [penup pu]

to pendown
    foreach :wx.active.turtles [tpendown ?]
end
copydef "pd "pendown
bury [pendown pd]

to pendownp
    op tpendownp first :wx.active.turtles
end
copydef "pendown? "pendownp
bury [pendownp pendown?]


to hideturtle
    foreach :wx.active.turtles [thideturtle ?]
end
copydef "ht "hideturtle
bury [hideturtle ht]

to showturtle
    foreach :wx.active.turtles [tshowturtle ?]
end
copydef "st "showturtle
bury [showturtle st]

to shownp
    op tshown first :wx.active.turtles
end
copydef "shown? "shownp
bury [shownp shown?]

to setxy :x :y
    foreach :wx.active.turtles [tsetxy ? :x :y]
end
bury "setxy

to setx :x
    foreach :wx.active.turtles [tsetx ? :x]
end
bury "setx

to sety :y
    foreach :wx.active.turtles [tsety ? :y]
end
bury "sety

to wrap
    foreach :wx.active.turtles [twrap ?]
end
to window
    foreach :wx.active.turtles [twindow ?]
end
to fence
    foreach :wx.active.turtles [tfence ?]
end
to turtlemode
    op tturtlemode first :wx.active.turtles
end
bury [wrap window fence turtlemode]

to xcor
    op txcor first :wx.active.turtles
end
bury "xcor

to ycor
    op tycor first :wx.active.turtles
end
bury "ycor

to moveuntil :angle :distance :stepsize :conditions :turtles
    op tmoveuntil (first :wx.active.turtles) :angle :distance :stepsize :conditions :turtles
end
bury "moveuntil

to heading
    op theading first :wx.active.turtles
end
bury "heading

to setheading :heading
    foreach :wx.active.turtles [tsetheading ? :heading]
end
bury "setheading
    
to rotation
    op trotation first :wx.active.turtles
end
bury "rotation

to setrotation :rotation
    foreach :wx.active.turtles [tsetrotation ? :rotation]
end
bury "setrotation
    
to rotate :a
    foreach :wx.active.turtles [trotate ? :a]
end
bury "rotate

to setpos :pos
    foreach :wx.active.turtles [tsetxy ? first :pos first bf :pos]
end
bury "setpos
    
to pos
    op se txcor first :wx.active.turtles tycor first :wx.active.turtles
end
bury "pos

to abs :x
    op if :x<0 [-:x] [:x]
end
bury "abs

to towards :pos
    localmake "dx (first :pos)-xcor
    localmake "dy (last :pos)-ycor
    localmake "adx abs :dx
    localmake "ady abs :dy
    localmake "ang if :adx=0 [0] [if :ady=0 [90] [arctan(:adx/:ady)]]
    if :dy<0 [make "ang 180-:ang]
    if :dx<0 [make "ang 360-:ang]
    op :ang
end
bury "towards

to home
    setxy 0 0
    setheading 0
end
bury "home

to setpensize :size
    foreach :wx.active.turtles [tsetpensize ? :size]
end
bury "setpensize

to pensize
    op tpensize first :wx.active.turtles
end
bury "pensize

to setpencolor :rgblist
    local [r g b]
    make "r first :rgblist
    make "g first bf :rgblist
    make "b first bf bf :rgblist
    foreach :wx.active.turtles [tsetpencolor ? :r :g :b]
end
copydef "setpc "setpencolor
bury [setpc setpencolor]

to capturebitmap :x1 :y1 :x2 :y2 :xcenter :ycenter :transparent
    foreach :wx.active.turtles [
        tcapturebitmap ? :x1 :y1 :x2 :y2 :xcenter :ycenter :transparent
    ]
end
bury "capturebitmap

to setshape :shape
    foreach :wx.active.turtles [
        tsetshape ? :shape
    ]
end
bury "setshape

to setxscale :scale
    foreach :wx.active.turtles [
        tsetxscale ? :scale
    ]
end
bury "setxscale

to setyscale :scale
    foreach :wx.active.turtles [
        tsetyscale ? :scale
    ]
end
bury "setyscale

to setxyscale :xscale :yscale
    foreach :wx.active.turtles [
        tsetxscale ? :xscale
        tsetyscale ? :yscale
    ]
end
bury "setxyscale

to setscale :scale
    setxyscale :scale :scale
end
bury "setscale

to xscale
    op txscale first :wx.active.turtles
end
bury "xscale

to yscale
    op tyscale first :wx.active.turtles
end
bury "yscale

to over :rgb
    local [r g b]
    make "r first :rgb
    make "g first bf :rgb
    make "b first bf bf :rgb
    foreach :wx.active.turtles [
        if tover ? :r :g :b [op "true]
    ]
    op "false
end
bury "over

to xyover :x :y :rgb
    local [r g b]
    make "r first :rgb
    make "g first bf :rgb
    make "b first bf bf :rgb
    foreach :wx.active.turtles [
        if txyover ? :x :y :r :g :b [op "true]
    ]
    op "false
end
bury "xyover

to touching :turtle
    foreach :wx.active.turtles [
        if ttouching ? :turtle [op "true]
    ]
    op "false
end
bury "touching

to xytouching :x :y :turtle
    foreach :wx.active.turtles [
        if txytouching ? :x :y :turtle [op "true]
    ]
    op "false
end
bury "xytouching

to whostouching
    local "ret
    make "ret []
    foreach :wx.active.turtles [
        make "ret union (twhostouching ?) :ret
    ]
    op :ret
end
bury "whostouching

to xywhostouching :x :y
    local "ret
    make "ret []
    foreach :wx.active.turtles [
        make "ret union (txywhostouching ? :x :y) :ret
    ]
    op :ret
end
bury "xywhostouching

to pasttopp
    foreach :wx.active.turtles [
        if tpasttop ? [op "true]
    ]
    op "false
end
to pastbottomp
    foreach :wx.active.turtles [
        if tpastbottom ? [op "true]
    ]
    op "false
end
to pastleftp
    foreach :wx.active.turtles [
        if tpastleft ? [op "true]
    ]
    op "false
end
to pastrightp
    foreach :wx.active.turtles [
        if tpastright ? [op "true]
    ]
    op "false
end
bury [pasttopp pastbottomp pastleftp pastrightp]

to penpaint
    foreach :wx.active.turtles [tpenpaint ?]
end
to penerase
    foreach :wx.active.turtles [tpenerase ?]
end
bury [penpaint penerase]

to setbackground :rgb
    %setbg first :rgb first bf :rgb first bf bf :rgb
end
copydef "setbg "setbackground
bury [setbackground setbg]

to pencolor
    op tpencolor first :wx.active.turtles
end
copydef "pc "pencolor
bury [pc pencolor]

to colorunder
    op tcolorunder first :wx.active.turtles
end
bury [colorunder]

to xycolorunder :x :y
    op txycolorunder first :wx.active.turtles :x :y
end
bury [xycolorunder]

to penmode
    op tpenmode first :wx.active.turtles
end
bury "penmode

to fill
    foreach :wx.active.turtles [tfill ?]
end
bury [fill]

to label :text
    foreach :wx.active.turtles [tlabel ? :text]
end
bury [label]

to settext :text
    foreach :wx.active.turtles [tsettext ? :text]
end
bury [settext]

to gettext
    op tgettext first :wx.active.turtles
end
bury [gettext]

to stamp
    foreach :wx.active.turtles [tstamp ?]
end
bury [stamp]

to waitfor.voice :voice
    if (timeleft :voice) > 5 [wait 1 waitfor.voice :voice]
end
to toot :voice :freq :duration [:volume 0.5] [:pan 0] [:attack 0.25] [:release 0.25]
    waitfor.voice :voice
    %toot :voice :freq :duration/60 :volume :pan :attack/60 :release/60
end
to toot.nonblocking :voice :freq :duration [:volume 0.5] [:pan 0] [:attack 0.25] [:release 0.25]
    %toot :voice :freq :duration/60 :volume :pan :attack/60 :release/60
end
to tootreplace :voice :freq :duration [:volume 0.5] [:pan 0] [:attack 0.25] [:release 0.25]
    %tootreplace :voice :freq :duration/60 :volume :pan :attack/60 :release/60
end
to timeleft :voice
    op (%timeleft :voice)*60
end
bury [waitfor.voice toot toot.nonblocking tootreplace timeleft]


; Ignore case by default.
make "caseignoredp "true
bury [[] [caseignoredp]]

bury [[] [terminalp]]

(print [Welcome to ContinuingLogo version] :logoversion)
bury [[] [logoversion]]
